/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface CommentCount {
    'config': any;
    'shortname': any;
  }
  interface CommentEmbed {
    'commentId': any;
    'height': any;
    'showMedia': any;
    'showParentComment': any;
    'width': any;
  }
  interface DiscussionEmbed {
    'config': any;
    'shortname': string;
  }
}

declare global {


  interface HTMLCommentCountElement extends Components.CommentCount, HTMLStencilElement {}
  var HTMLCommentCountElement: {
    prototype: HTMLCommentCountElement;
    new (): HTMLCommentCountElement;
  };

  interface HTMLCommentEmbedElement extends Components.CommentEmbed, HTMLStencilElement {}
  var HTMLCommentEmbedElement: {
    prototype: HTMLCommentEmbedElement;
    new (): HTMLCommentEmbedElement;
  };

  interface HTMLDiscussionEmbedElement extends Components.DiscussionEmbed, HTMLStencilElement {}
  var HTMLDiscussionEmbedElement: {
    prototype: HTMLDiscussionEmbedElement;
    new (): HTMLDiscussionEmbedElement;
  };
  interface HTMLElementTagNameMap {
    'comment-count': HTMLCommentCountElement;
    'comment-embed': HTMLCommentEmbedElement;
    'discussion-embed': HTMLDiscussionEmbedElement;
  }
}

declare namespace LocalJSX {
  interface CommentCount {
    'config'?: any;
    'shortname'?: any;
  }
  interface CommentEmbed {
    'commentId'?: any;
    'height'?: any;
    'showMedia'?: any;
    'showParentComment'?: any;
    'width'?: any;
  }
  interface DiscussionEmbed {
    'config'?: any;
    'shortname'?: string;
  }

  interface IntrinsicElements {
    'comment-count': CommentCount;
    'comment-embed': CommentEmbed;
    'discussion-embed': DiscussionEmbed;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'comment-count': LocalJSX.CommentCount & JSXBase.HTMLAttributes<HTMLCommentCountElement>;
      'comment-embed': LocalJSX.CommentEmbed & JSXBase.HTMLAttributes<HTMLCommentEmbedElement>;
      'discussion-embed': LocalJSX.DiscussionEmbed & JSXBase.HTMLAttributes<HTMLDiscussionEmbedElement>;
    }
  }
}


